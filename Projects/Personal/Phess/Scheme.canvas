{
	"nodes":[
		{"id":"bb71f83deac9b13f","type":"group","x":-1380,"y":-780,"width":1360,"height":1060,"label":"무제 그룹"},
		{"id":"be77ed000776f7e1","type":"text","text":"## Agent\n\n- __전략 (ML 사용할 수도, 안할 수도 있음)__\n- evaluate_obs: obs를 인풋으로 받아 현재 상황을 점수로 반환.\n- __evaluate_move__: move와 obs를 인풋으로 받아, obs에서 해당 move의 가치를 반환함 \n- get_best_move(obs): obs를 인풋으로 받아 가장 높은 가치를 가지는 move를 반환.","x":-1360,"y":-580,"width":420,"height":700,"color":"5"},
		{"id":"3efbb5f8950d1264","type":"text","text":"## Environment (ChessManager)\n\n- __Interface__\n\t- 다양한 action이 들어왔을 때, action을 정규화\n\t- obs를 반환\n- __ChessGame__\n\t- 전반적인 게임의 상황을 담고있는 클래스\n\t- 활성화된 기물, 현재 보드, 현재 게임 진행 정보를 담고 있음\n\t- __inspect_all_actions__: 현재 기물들에게 가능한 모든 action을 물어본 뒤에, 모든 action 들의 가능한지 여부를 dict[namedtuple]로 저장. (action, is_valid, reason)\n\t- __get_legal_actions__: 현재 보드 상황에서 가능한 모든 action 리스트를 반환\n\t- __check_is_valid_action__: action을 인풋으로 받아 현재 보드 상황에서 해당 액션이 가능한 지 판단. 불가능하다면 왜 불가능한지 이유도 Error으로 반환되어야 함. is_valid, action 을 반환해야함\n\t- __update__: action 이 valid하면 해당 action을 적용하여 다음 상태의 보드로 현재 보드를 업데이트함.\n\t- __get_observation__: 현재 보드의 observation을 반환함.\n\n- __Renderer__\n\t- 현재 보드상태를 시각화해서 보여주는 클래스\n\t- string, GUI으로 보여줄 지 선택 가능함","x":-760,"y":-580,"width":720,"height":700,"color":"5"}
	],
	"edges":[
		{"id":"49cc68af8fc20fa1","fromNode":"3efbb5f8950d1264","fromSide":"bottom","toNode":"be77ed000776f7e1","toSide":"bottom","label":"observation"},
		{"id":"f00281ab587fb8ee","fromNode":"be77ed000776f7e1","fromSide":"top","toNode":"3efbb5f8950d1264","toSide":"top","label":"action"}
	]
}